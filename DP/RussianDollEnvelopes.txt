/**

You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.

What is the maximum number of envelopes can you Russian doll? (put one inside other)

Example:
Given envelopes = [[5,4],[6,4],[6,7],[2,3]], the maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).
*/

/* @Method 1:
思路： Binary Search + DP
Time : O(nlogn) Space: O(n)
思路跟Longest Increasing Subsequence一样
*/

public class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if(envelopes == null || envelopes.length == 0 || envelopes[0].length <= 1)
            return 0;
        Arrays.sort(envelopes, (a, b) -> { return a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]; });
        int[] dp = new int[envelopes.length];
        int size = 0;
        for(int[] envelope : envelopes){
            int i = Arrays.binarySearch(dp, 0, size, envelope[1]);
            if(i < 0) i = - (i + 1);
            dp[i] = envelope[1];
            if(i == size) size++;
        }
        return size;
    }
}
/*
O(nlogn)
不用arrys.binarySearch
*/
public class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int size = 0;
        
        for(int num: nums) {
            // binary search
            int left = 0, right = size, middle = 0;     // right = size
            while(left < right) {
                middle = left + (right - left) / 2;
                if(dp[middle] < num) left = middle + 1;
                else right = middle;
            }
            
            // left is the right position to 'replace' in dp array
            dp[left] = num;
            if(left == size) size++;
        }
        return size;
    }
}
/*
Time: O(n^2)
*/
public int maxEnvelopes(int[][] envelopes) {
    Arrays.sort(envelopes, (a, b) -> a[0] - b[0]);
    int max = 0;
    int dp [] = new int [envelopes.length];
    for(int i = 0; i < envelopes.length; i++){
        dp[i] = 1;
        for(int j = 0; j < i; j++){
            if(envelopes[j][0] < envelopes[i][0] && envelopes[j][1] < envelopes[i][1])
                dp[i] = Math.max(dp[i], dp[j] + 1);
        }
        max = Math.max(dp[i], max);
    }
    return max;
}